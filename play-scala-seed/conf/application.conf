# https://www.playframework.com/documentation/latest/Configuration
play.modules.enabled += "play.api.db.slick.SlickModule"

# Database configuration
db.default.driver = "com.mysql.cj.jdbc.Driver"
db.default.url = "jdbc:mysql://localhost:3306/beersdb?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true"
db.default.user = "beeruser"
db.default.password = "Rooney98@"  # Updated password here

# Slick configuration
slick.dbs.default.profile = "slick.jdbc.MySQLProfile$"
slick.dbs.default.db.driver = "com.mysql.cj.jdbc.Driver"
slick.dbs.default.db.url = "jdbc:mysql://localhost:3306/beersdb?useSSL=false&serverTimezone=UTC"
slick.dbs.default.db.user = "beeruser"
slick.dbs.default.db.password = "Rooney98@"  # Updated password here

# Evolutions configuration
play.evolutions.enabled = true
play.evolutions.autoApply = true

# Enable CORS for your API
play.filters.enabled += "play.filters.cors.CORSFilter"

# Configure CORS
play.filters.cors {
    # Allow requests from your React frontend's origin (localhost:5173)
    allowedOrigins = ["http://localhost:5173"]  # Change this if your frontend is running on a different port
    allowedHttpMethods = ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allowedHttpHeaders = ["Accept", "Content-Type", "Origin", "Authorization"]
    exposedHeaders = []  # Add any exposed headers if needed
    supportsCredentials = false
}

#5. Test CORS Using the Browser Console
 #If you're still facing issues, you can check the response headers by inspecting the network request in the browser developer tools.

 #Open the Developer Tools (usually with F12 or right-click â†’ Inspect).
 #Go to the Network tab.
 #Reload your React app and check the failed API request.
 #Check if the Access-Control-Allow-Origin header is present in the response.
 #If the CORS headers are not set correctly, the issue will still persist.